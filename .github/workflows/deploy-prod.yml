name: Deploy Prod to Elastic Beanstalk

on:
  push:
    branches:
      - main

env:
  REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  EB_APP: ${{ secrets.EB_APP_NAME }}
  EB_ENV: ${{ secrets.EB_ENV_PROD }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: aws
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

    #   - name: Login to ECR
    #     run: echo "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build, tag and push Docker image to ECR
        run: |
          docker build -t $ECR_REPOSITORY:$GITHUB_SHA .
          docker tag $ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        #   docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA

      - name: Create Dockerrun with new image
        run: |
          cat > Dockerrun.aws.json <<EOF
          {
            "AWSEBDockerrunVersion": 2,
            "containerDefinitions": [{
              "name": "lacrei-api",
              "image": "${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}",
              "essential": true,
              "memory": 512,
              "portMappings": [{"containerPort": 8000, "hostPort": 8000}],
              "command": ["bash","-lc","poetry run python manage.py migrate --noinput && poetry run gunicorn core.wsgi:application --bind 0.0.0.0:8000"]
            }]
          }
          EOF

      - name: Zip Dockerrun
        run: zip deploy.zip Dockerrun.aws.json

      - name: Upload deploy package to S3
        run: aws s3 cp deploy.zip s3://$S3_BUCKET/deploy-${GITHUB_RUN_ID}.zip

      - name: Create application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name $EB_APP \
            --version-label v-${GITHUB_RUN_ID} \
            --source-bundle S3Bucket=$S3_BUCKET,S3Key=deploy-${GITHUB_RUN_ID}.zip \
            --region $REGION
      
      - name: Debug application versions
        run: |
          echo "ðŸ”Ž Verificando versÃµes existentes..."
          aws elasticbeanstalk describe-application-versions \
            --application-name $EB_APP \
            --query "ApplicationVersions[].VersionLabel" \
            --output text

      - name: Wait for version to be processed
        run: |
          for i in {1..10}; do
            STATUS=$(aws elasticbeanstalk describe-application-versions \
              --application-name $EB_APP \
              --version-label v-${GITHUB_RUN_ID} \
              --query "ApplicationVersions[0].Status" \
              --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" = "PROCESSED" ]; then
              echo "Version is ready!"
              break
            fi
            echo "Waiting for processing (attempt $i)..."
            sleep 10
          done
      - name: Update environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name $EB_ENV \
            --version-label v-${GITHUB_RUN_ID}

      - name: Wait for environment to be healthy
        run: |
          # This polls for environment status until it becomes 'Ready' or times out
          aws elasticbeanstalk wait environment-updated --environment-names $EB_ENV
